/*
 * Copyright (c) 2011-2019, simple-http committers
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package simplehttp;

import java.io.File;
import java.text.MessageFormat;
import java.util.Objects;

/**
 * An approximation of the mutlipart content. It's an "approximation" as {@link Multipart} only supports a single
 * binary "part" at present and it is generated by the underlying HTTP client dynamically (i.e. Apache will generate the 
 * actual entity and create a dynamic boundary, differing each time).
 * 
 */
class MultipartContent implements MessageContent {
	
	private final String name;
	private final File file;

	/** Represents a single "part" multipart message based on a file (intended to be used as file upload) */
	public MultipartContent(String name, File file) {
		this.name = name;
		this.file = file;
	}

	@Override
	public String asString() {
		return new StringBuilder()
			.append("--boundary\n")
			.append(MessageFormat.format("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\n", name, file.getName()))
			.append("\n[binary content not displayed]\n")
			.append("--boundary--\n")
			.toString();
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		MultipartContent that = (MultipartContent) o;
		return Objects.equals(name, that.name) &&
			Objects.equals(file, that.file);
	}

	@Override
	public int hashCode() {
		return Objects.hash(name, file);
	}

	@Override
	public String toString() {
		return asString();
	}
}
